VERSION = net-win32-smp

COMMON_SRC = .
CONVLIBS_SRC = .\libs\conv-libs

LIBS_DIR = ..\lib
XLATI_DIR = ..\bin
HOST_DIR = ..\bin

INC = /I"$(COMMON_SRC)"

CPP_PROJ=/nologo /MT /W3 /GX /Z7 /O2 $(INC)\
 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /YX \
 /Fo /c

SEQCPP_PROJ=/nologo /ML /W3 /GX /Z7 /O2 $(INC) \
 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /YX \
 /Fo /c

CPP = cl.exe
LINK = link.exe
LIBR = lib.exe
LINK_FLAGS = /nologo 

CHARMXI=$(XLATI_DIR)\charmxi.exe
CONV_CPM=$(XLATI_DIR)\conv-cpm.exe

LINK_OTHER = kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib \
 advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib \
 odbccp32.lib /subsystem:console /incremental:no #/machine:IX86

ALL: CHARM++

CHARM++ : CONVERSE CHARMLIBS TRANSLATORS

TRANSLATORS : $(CHARMXI) $(CONV_CPM)

AMPI: CHARM++ $(LIBS_DIR)\libampi.a $(LIBS_DIR)\libampif.a

#.SILENT:

LIBS : CONVLIBS CHARMLIBS
	 @echo Nothing to do here right now.

###############################################################################
#
# The basics (bin, lib, include, headers)
#
###############################################################################

CVHEADERS=cpthreads.h converse.h conv-trace.h trace.h conv-ccs.h \
      conv-autoconfig.h conv-mach.h conv-mach.sh \
      CkFutures.decl.h CkArray.decl.h CkReduction.decl.h \
      LBDatabase.decl.h CentralLB.decl.h \
      RandCentLB.decl.h RecBisectBfLB.decl.h \
      MetisLB.decl.h RefineLB.decl.h \
      HeapCentLB.decl.h NborBaseLB.decl.h NeighborLB.decl.h \
      WSLB.decl.h GridCommLB.decl.h GridCommRefineLB.decl.h GridMetisLB.decl.h \
      GridHybridLB.decl.h GridHybridSeedLB.decl.h GreedyRefLB.decl.h RandRefLB.decl.h \
      tempo.decl.h waitqd.decl.h \
	  CommLB.decl.h Comm1LB.decl.h  \
	  ampi.decl.h ampimain.decl.h BlueGene.decl.h blue.h

# The .c files are there to be #included by clients whole
# This is a bit unusual, but makes client linking simpler.
UTILHEADERS=pup.h pup_c.h ckhashtable.h cklists.h conv-lists.h \
	sockRoutines.h sockRoutines.c

CKHEADERS=ck.h ckstream.h envelope.h init.h qd.h charm.h charm++.h \
	  ckfutures.h ckarray.h ckreduction.h readonly.h $(UTILHEADERS) \
	  tempo.h waitqd.h LBDatabase.h lbdb.h \
	  LBDBManager.h LBComm.h LBOM.h LBObj.h LBMachineUtil.h \
	  Refiner.h ObjGraph.h heap.h elements.h CommLBHeap.h \
	  CentralLB.h RandCentLB.h RecBisectBfLB.h \
	  RefineLB.h HeapCentLB.h CommLB.h Comm1LB.h \
	  MetisLB.h NborBaseLB.h \
	  NeighborLB.h WSLB.h GridCommLB.h GridCommRefineLB.h \
	  GridMetisLB.h GridHybridLB.h GridHybridSeedLB.h GreedyRefLB.h RandRefLB.h \
	  ampi.h BlueGene.h \
	  $(CVHEADERS)

ALLHEADERS=$(CKHEADERS) \
    simplemsg.h sm.h pvmc.h pvm3.h sdag.h \
	graph.h bitvecset.h Set.h ampiimpl.h

BASICS : DIRSSOURCES $(ALLHEADERS)
	@if exist ..\include\nul rd /s /q ..\include
	@xcopy /q /i *.h ..\include
	@xcopy /q /i sockRoutines.c ..\include
	-@if exist BASICS\nul rd /s /q BASICS
	-@mkdir BASICS

DIRSSOURCES :
	@echo Gathering source code...
	@if exist ..\bin\nul       rd    /s /q  ..\bin
	@if exist ..\lib\nul       rd    /s /q  ..\lib
	@if exist ..\src\nul       rd    /s /q  ..\src
	@if exist ..\pgms\nul      rd    /s /q  ..\pgms
	@if exist ..\libsrc\nul    rd    /s /q  ..\libsrc
	@mkdir    ..\bin
	@mkdir    ..\lib
	@mkdir    ..\src
	@xcopy    /q /i /e /s /y ..\..\src\Common\libs libs
	@xcopy /d /q  ..\..\src\Common\conv-core\* .
	@xcopy /d /q  ..\..\src\Common\conv-ldb\* .
	@xcopy /d /q  ..\..\src\Common\ck-core\* .
	@xcopy /d /q  ..\..\src\Common\ck-ldb\* .
	@xcopy /d /q  ..\..\src\Common\ck-perf\* .
	@xcopy /d /q  ..\..\src\Common\langs\ampi\* .
	@xcopy /d /q  ..\..\src\Common\langs\bluegene\* .
	@xcopy /d /q  ..\..\src\Common\langs\simplemsg\* .
	@xcopy /d /q  ..\..\src\Common\langs\pvmc\* .
	@xcopy /d /q  ..\..\src\Common\util\* .
	@xcopy /d /q  ..\..\src\Common\xlat-i\* .
	@xcopy /d /q  ..\..\src\Common\xlat-i\sdag\* .
	@xcopy /d /q  ..\..\src\Common\xlatcpm\*.c .
	@xcopy /d /q  ..\..\src\Common.win32\*.h .
	@xcopy /d /q  ..\..\src\Common.net\* .
	@xcopy /d /q  ..\..\src\$(VERSION)\* .
	@xcopy    /q /i /e /s /y ..\..\src\Common.net\charmrun  charmrun  
	@xcopy /d /q $(CONVLIBS_SRC)\commlib\*.C .
	@xcopy /d /q $(CONVLIBS_SRC)\commlib\*.h .
	@xcopy /d /q  $(CONVLIBS_SRC)\packLib\*.C .
	@xcopy /d /q  $(CONVLIBS_SRC)\packLib\*.h .
	@if exist ..\pgms\nul    rd /s /q ..\pgms
	@xcopy    /q /i /e /s ..\..\pgms  ..\pgms  
	@mkdir    DIRSSOURCES

###############################################################################
#
# Converse Libraries
#
###############################################################################

TRACELIBS=libtrace-none.a libtrace-projections.a libtrace-summary.a libtrace-counter.a

CVLIBS=$(LIBS_DIR)\libconv-core.a $(LIBS_DIR)\libconv-cplus-n.a $(LIBS_DIR)\libconv-cplus-y.a $(LIBS_DIR)\libconv-util.a $(LIBS_DIR)\libldb-rand.o $(LIBS_DIR)\libldb-spray.o $(LIBS_DIR)\libldb-graph.o $(LIBS_DIR)\libldb-test.o $(TRACELIBS)

LIBCONV_CORE=threads.obj convcore.obj conv-conds.obj queueing.obj msgmgr.obj memory.obj cpm.obj cpthreads.obj futures.obj cldb.obj random.obj debug-message.obj debug-object.obj info.obj generate.obj edgelist.obj conv-ccs.obj quiescence.obj 

LIBCONV_UTIL=pup_util.obj pup_xlater.obj pup_c.obj ckhashtable.obj sockRoutines.obj conv-lists.obj

LIBCONV_UTILF=pup_f.obj

CONVERSE : BASICS $(CVLIBS) CHARMRUN-IF-NEEDED DAEMON $(CONV_CPM)

DAEMON : daemon.c sockRoutines.c
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\daemon.c
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\sockRoutines.c
	$(LINK) $(LINK_FLAGS) ws2_32.lib advapi32.lib $(LINK_OTHER) \
	/out:"$(HOST_DIR)\charmd.exe" daemon.obj sockRoutines.obj
	$(CPP) $(CPP_PROJ) /D "FACELESS" $(COMMON_SRC)\daemon.c
	$(LINK) $(LINK_FLAGS) ws2_32.lib advapi32.lib $(LINK_OTHER) \
	/out:"$(HOST_DIR)\charmd_faceless.exe" daemon.obj sockRoutines.obj

CHARMRUN-IF-NEEDED : charmrun\charmrun.c sockRoutines.c
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\charmrun\charmrun.c
	$(LINK) $(LINK_FLAGS) ws2_32.lib advapi32.lib $(LINK_OTHER) \
	/out:"$(HOST_DIR)\charmrun.exe" charmrun.obj

CONVLIBS : MASTER-SLAVE PACKLIB COMMLIB UTIL

MASTER-SLAVE : $(CONVLIBS_SRC)\master-slave\cms.c
	$(CPP) $(CPP_PROJ) $(CONVLIBS_SRC)\master-slave\cms.c
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libcms.a" cms.obj
	@if exist ..\include\cms.h del /q ..\include\cms.h
	@copy $(CONVLIBS_SRC)\master-slave\cms.h ..\include\cms.h


UTIL_SRC=pup_util.C pup_xlater.C pup_c.C ckhashtable.C
UTIL: $(UTIL_SRC)
	$(CPP) $(CPP_PROJ) /TP $(UTIL_SRC)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libconv-util.a" \
	  $(LIBCONV_UTIL)

COMMLIB_SRC=charm_bind.C commlib.C overlapper.C treerouter.C gridrouter.C \
	de.C bcast.C rsend.C petable.C 
COMMLIB_OBJ=charm_bind.obj commlib.obj overlapper.obj treerouter.obj gridrouter.obj \
	de.obj bcast.obj rsend.obj petable.obj 
COMMLIB :  $(COMMLIB_SRC)
	$(CPP) $(CPP_PROJ) /TP $(COMMLIB_SRC)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libcomm.a" \
	  $(COMMLIB_OBJ)

PACKLIB_SRC=packc.C packf77.C
PACKLIB_OBJ=packc.obj packf77.obj
PACKLIB : $(PACKLIB_SRC)
	$(CPP) $(CPP_PROJ) /TP $(PACKLIB_SRC)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libpacklib.a" \
	  $(PACKLIB_OBJ)

$(LIBS_DIR)\libconv-core.a : $(LIBCONV_CORE)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libconv-core.a" \
	$(LIBCONV_CORE)

$(LIBS_DIR)\libconv-cplus-y.a : machine.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) /D "_LIB" /D"FOR_CPLUS=1" machine.c
	$(LINK) -lib $(LINK_FLAGS) /out:"$(LIBS_DIR)\libconv-cplus-y.a" \
	machine.obj

$(LIBS_DIR)\libconv-cplus-n.a : machine.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) /D"FOR_CPLUS=0" machine.c
	$(LINK) -lib $(LINK_FLAGS) /out:"$(LIBS_DIR)\libconv-cplus-n.a" \
	machine.obj

$(LIBS_DIR)\libconv-util.a : $(LIBCONV_UTIL)
	$(LINK) -lib $(LINK_FLAGS) /out:"$(LIBS_DIR)\libconv-util.a" \
	$(LIBCONV_UTIL)

cpm.obj : cpm.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\cpm.c

fifo.obj : fifo.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\fifo.c

threads.obj : threads.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) /I"QuickThreads" $(COMMON_SRC)\threads.c

convcore.obj : convcore.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\convcore.c

conv-ccs.obj : conv-ccs.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) $(COMMON_SRC)\conv-ccs.c

random.obj : random.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) random.c

queueing.obj : queueing.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) queueing.c

conv-conds.obj : conv-conds.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) conv-conds.c

futures.obj : futures.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) futures.c

msgmgr.obj : msgmgr.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) msgmgr.c

cpthreads.obj : cpthreads.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) cpthreads.c

memory.obj : memory.c $(CVHEADERS)
	$(CPP)$(CPP_PROJ) memory.c

edgelist.obj : edgelist.c typedefs.h $(CVHEADERS)
	$(CPP) $(CPP_PROJ) edgelist.c

generate.obj : generate.c typedefs.h $(CVHEADERS)
	$(CPP) $(CPP_PROJ) generate.c

cldb.obj : cldb.c cldb.h $(CVHEADERS)
	$(CPP) $(CPP_PROJ) cldb.c

quiescence.obj: quiescence.c $(CVHEADERS) 
	$(CPP) $(CPP_PROJ) quiescence.c

$(LIBS_DIR)\libldb-rand.o : cldb.rand.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) cldb.rand.c
	@copy cldb.rand.obj ..\lib\libldb-rand.o

$(LIBS_DIR)\libldb-graph.o : cldb.graph.c cldb.graph.h $(CVHEADERS)
	$(CPP) $(CPP_PROJ) cldb.graph.c 
	@copy cldb.graph.obj ..\lib\libldb-graph.o

$(LIBS_DIR)\libldb-spray.o : cldb.spray.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ)  cldb.spray.c
	@copy cldb.spray.obj ..\lib\libldb-spray.o

$(LIBS_DIR)\libldb-test.o : cldb.test.c $(CVHEADERS)
	$(CPP) $(CPP_PROJ) cldb.test.c
	@copy cldb.test.obj ..\lib\libldb-test.o

pup_util.obj : pup_util.C $(UTILHEADERS)
	$(CPP) $(CPP_PROJ) /TP pup_util.C

pup_xlater.obj : pup_xlater.C $(UTILHEADERS)
	$(CPP) $(CPP_PROJ) /TP pup_xlater.C

pup_c.obj : pup_c.C $(UTILHEADERS)
	$(CPP) $(CPP_PROJ) /TP pup_c.C

ckhashtable.obj : ckhashtable.C $(UTILHEADERS)
	$(CPP) $(CPP_PROJ) /TP ckhashtable.C

conv-lists.obj : conv-lists.C $(UTILHEADERS)
	$(CPP) $(CPP_PROJ) /TP conv-lists.C

########################################################################################################
#
# CHARM LIBRARIES
#
########################################################################################################

CK_LIBS_CORE=$(LIBS_DIR)\libck.a

LIBCK_CORE=init.obj register.obj qd.obj ck.obj main.obj msgalloc.obj ckfutures.obj \
           ckarray.obj ckreduction.obj \
           tempo.obj waitqd.obj LBDatabase.obj lbdb.obj \
	   LBDBManager.obj LBComm.obj LBObj.obj LBMachineUtil.obj Refiner.obj \
	   ObjGraph.obj \
	   CentralLB.obj RandCentLB.obj \
	   RecBisectBfLB.obj graph.obj bitvecset.obj \
	   MetisLB.obj RefineLB.obj Set.obj CommLB.obj Comm1LB.obj\
           HeapCentLB.obj heap.obj NborBaseLB.obj NeighborLB.obj WSLB.obj \
	   GridCommLB.obj GridCommRefineLB.obj GridMetisLB.obj GridHybridLB.obj \
	   GridHybridSeedLB.obj GreedyRefLB.obj RandRefLB.obj CommLBHeap.obj


CHARMLIBS : CONVERSE $(CK_LIBS_CORE)

$(CK_LIBS_CORE) : $(LIBCK_CORE)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libck.a" \
	$(LIBCK_CORE)

LIBTRACE_NONE=trace-none.obj

libtrace-none.a : $(LIBTRACE_NONE)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libtrace-none.a" \
	$(LIBTRACE_NONE)

LIBTRACE_PROJ=trace-projections.obj

libtrace-projections.a : $(LIBTRACE_PROJ)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libtrace-projections.a" \
	$(LIBTRACE_PROJ)

LIBTRACE_SUMM=trace-summary.obj

libtrace-summary.a: $(LIBTRACE_SUMM)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libtrace-summary.a" \
	$(LIBTRACE_SUMM)

LIBTRACE_COUNT=trace-counter.obj

libtrace-counter.a: $(LIBTRACE_COUNT)
	$(LIBR) $(LINK_FLAGS) /out:"$(LIBS_DIR)\libtrace-counter.a" \
	$(LIBTRACE_COUNT)

ampi.decl.h ampi.def.h : ampi.ci $(CHARMXI)
	$(CHARMXI) -ansi ampi.ci

ampimain.decl.h ampimain.def.h : ampimain.ci $(CHARMXI)
	$(CHARMXI) ampimain.ci

CkFutures.decl.h CkFutures.def.h : ckfutures.ci $(CHARMXI)
	$(CHARMXI) -ansi ckfutures.ci                      

tempo.decl.h tempo.def.h : tempo.ci $(CHARMXI)
	$(CHARMXI) -ansi tempo.ci                         

waitqd.decl.h waitqd.def.h : waitqd.ci $(CHARMXI)
	$(CHARMXI) -ansi waitqd.ci     

CkReduction.decl.h CkReduction.def.h : ckreduction.ci $(CHARMXI)
	$(CHARMXI) -ansi ckreduction.ci

CkArray.decl.h CkArray.def.h : ckarray.ci $(CHARMXI)
	$(CHARMXI) -ansi ckarray.ci

LBDatabase.decl.h LBDatabase.def.h : LBDatabase.ci $(CHARMXI)
	$(CHARMXI) -ansi LBDatabase.ci

CentralLB.decl.h Central.def.h : CentralLB.ci $(CHARMXI)
	$(CHARMXI) -ansi CentralLB.ci

RandCentLB.decl.h RandCent.def.h : RandCentLB.ci $(CHARMXI)
	$(CHARMXI) -ansi RandCentLB.ci

RecBisectBfLB.decl.h RandCent.def.h : RecBisectBfLB.ci $(CHARMXI)
	$(CHARMXI) -ansi RecBisectBfLB.ci

MetisLB.decl.h MetisLB.def.h : MetisLB.ci $(CHARMXI)
	$(CHARMXI) -ansi MetisLB.ci

RefineLB.decl.h RefineLB.def.h : RefineLB.ci $(CHARMXI)
	$(CHARMXI) -ansi RefineLB.ci

CommLB.decl.h CommLB.def.h : CommLB.ci $(CHARMXI)
	$(CHARMXI) -ansi CommLB.ci

Comm1LB.decl.h Comm1LB.def.h : Comm1LB.ci $(CHARMXI)
	$(CHARMXI) -ansi Comm1LB.ci

HeapCentLB.decl.h HeapCentLB.def.h : HeapCentLB.ci $(CHARMXI)
	$(CHARMXI) -ansi HeapCentLB.ci

NborBaseLB.decl.h NborBaseLB.def.h : NborBaseLB.ci $(CHARMXI)
	$(CHARMXI) -ansi NborBaseLB.ci

WSLB.decl.h WSLB.def.h : WSLB.ci $(CHARMXI)
	$(CHARMXI) -ansi WSLB.ci

GridCommLB.decl.h GridCommLB.def.h : GridCommLB.ci $(CHARMXI)
	$(CHARMXI) -ansi GridCommLB.ci

GridCommRefineLB.decl.h GridCommRefineLB.def.h : GridCommRefineLB.ci $(CHARMXI)
	$(CHARMXI) -ansi GridCommRefineLB.ci

GridMetisLB.decl.h GridMetisLB.def.h : GridMetisLB.ci $(CHARMXI)
	$(CHARMXI) -ansi GridMetisLB.ci

GridHybridLB.decl.h GridHybridLB.def.h : GridHybridLB.ci $(CHARMXI)
	$(CHARMXI) -ansi GridHybridLB.ci

GridHybridSeedLB.decl.h GridHybridSeedLB.def.h : GridHybridSeedLB.ci $(CHARMXI)
	$(CHARMXI) -ansi GridHybridSeedLB.ci

GreedyRefLB.decl.h GreedyRefLB.def.h : GreedyRefLB.ci $(CHARMXI)
	$(CHARMXI) -ansi GreedyRefLB.ci

NeighborLB.decl.h NeighborLB.def.h : NeighborLB.ci $(CHARMXI)
	$(CHARMXI) -ansi NeighborLB.ci

RandRefLB.decl.h RandRefLB.def.h : RandRefLB.ci $(CHARMXI)
	$(CHARMXI) -ansi RandRefLB.ci

BlueGene.decl.h BlueGene.def.h : BlueGene.ci $(CHARMXI)
	$(CHARMXI) -ansi BlueGene.ci

init.obj: init.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP init.C

msgalloc.obj: msgalloc.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP msgalloc.C

register.obj: register.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP register.C

ckfutures.obj: ckfutures.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP ckfutures.C

tempo.obj: tempo.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP tempo.C

waitqd.obj: waitqd.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP waitqd.C

ckarray.obj: ckarray.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP ckarray.C

ckreduction.obj: ckreduction.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP ckreduction.C

lbdb.obj: lbdb.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP lbdb.C

LBDBManager.obj: LBDBManager.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP LBDBManager.C

LBComm.obj: LBComm.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP LBComm.C

LBObj.obj: LBObj.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP LBObj.C

LBMachineUtil.obj: LBMachineUtil.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP LBMachineUtil.C

LBDatabase.obj: LBDatabase.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP LBDatabase.C

Refiner.obj: Refiner.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP Refiner.C

ObjGraph.obj: ObjGraph.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP ObjGraph.C

CentralLB.obj: CentralLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP CentralLB.C

RandCentLB.obj: RandCentLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP RandCentLB.C

RecBisectBfLB.obj: RecBisectBfLB.C $(CKHEADERS) graph.h bitvecset.h
	$(CPP) $(CPP_PROJ) /TP RecBisectBfLB.C

graph.obj: graph.c 
	$(CPP) $(CPP_PROJ) graph.c

fifoInt.obj: fifoInt.c 
	$(CPP) $(CPP_PROJ) fifoInt.c

bitvecset.obj: bitvecset.c 
	$(CPP) $(CPP_PROJ) bitvecset.c

MetisLB.obj: MetisLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP MetisLB.C

RefineLB.obj: RefineLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP RefineLB.C

CommLB.obj: CommLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP CommLB.C

Comm1LB.obj: Comm1LB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP Comm1LB.C

HeapCentLB.obj: HeapCentLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP HeapCentLB.C

Set.obj: Set.C $(CKHEADERS) Set.h elements.h 
	$(CPP) $(CPP_PROJ) /TP Set.C

heap.obj: heap.C $(CKHEADERS) elements.h heap.h
	$(CPP) $(CPP_PROJ) /TP heap.C

CommLBHeap.obj: CommLBHeap.C $(CKHEADERS) CommLBHeap.h
	$(CPP) $(CPP_PROJ) /TP CommLBHeap.C

NborBaseLB.obj: NborBaseLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP NborBaseLB.C

NeighborLB.obj: NeighborLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP NeighborLB.C

WSLB.obj: WSLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP WSLB.C

GridCommLB.obj: GridCommLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP GridCommLB.C

GridCommRefineLB.obj: GridCommRefineLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP GridCommRefineLB.C

GridMetisLB.obj: GridMetisLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP GridMetisLB.C

GridHybridLB.obj: GridHybridLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP GridHybridLB.C

GridHybridSeedLB.obj: GridHybridSeedLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP GridHybridSeedLB.C

GreedyRefLB.obj: GreedyRefLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP GreedyRefLB.C

RandRefLB.obj: RandRefLB.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP RandRefLB.C

qd.obj: qd.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP qd.C

main.obj: main.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP main.C

debug-object.obj: debug-object.h debug-object.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP debug-object.C

debug-message.obj: debug-message.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP debug-message.C

info.obj: info.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP info.C

ck.obj: ck.C $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP ck.C

trace-none.obj : trace-none.C trace.h $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP trace-none.C

trace-projections.obj : trace-projections.C trace-projections.h trace.h $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP trace-projections.C

trace-summary.obj : trace-summary.C trace-summary.h trace.h $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP trace-summary.C

trace-counter.obj : trace-counter.C trace-counter.h trace.h $(CKHEADERS)
	$(CPP) $(CPP_PROJ) /TP trace-counter.C

###############################################################################
#
# The interface translator
#
###############################################################################

XIHEADERS=xi-symbol.h xi-grammar.tab.h xi-util.h
CHARMXLATI=xi-main.obj xi-symbol.obj xi-grammar.tab.obj xi-scan.obj xi-util.obj
SDAGOBJ=sdag-main.obj sdag-trans.obj CLexer.obj CParser.obj CParsedFile.obj \
	CParseNode.obj sdag-globals.obj CParseNodeProcess.obj CEntry.obj
SDAGHEADERS=CLexer.h CToken.h EToken.h CParser.h CParsedFile.h CParseNode.h \
	sdag-globals.h CEntry.h

$(CONV_CPM): conv-cpm.c
	$(CPP) $(SEQCPP_PROJ) conv-cpm.c
	$(LINK) $(LINK_FLAGS) $(LINK_OTHER) /out:"$(XLATI_DIR)\conv-cpm.exe" conv-cpm.obj

$(CHARMXI): $(CHARMXLATI) $(SDAGOBJ)
	$(LINK) $(LINK_FLAGS) /out:"$(XLATI_DIR)\charmxi.exe" \
	$(CHARMXLATI) $(SDAGOBJ)

xi-main.obj :                                         
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\xi-main.C

xi-symbol.obj :                                       
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\xi-symbol.C

xi-util.obj :                                       
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\xi-util.C

xi-grammar.tab.obj :                                
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\xi-grammar.tab.C

xi-scan.obj :                                          
	$(CPP) $(SEQCPP_PROJ) /TP /DYY_NEVER_INTERACTIVE $(COMMON_SRC)\xi-scan.C

sdag-main.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\sdag-main.C

sdag-trans.obj:
	$(CPP) $(SEQCPP_PROJ) $(COMMON_SRC)\sdag-trans.c

CLexer.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\CLexer.C

CParser.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\CParser.C

CParsedFile.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\CParsedFile.C

CParseNode.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\CParseNode.C

sdag-globals.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\sdag-globals.C

CParseNodeProcess.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\CParseNodeProcess.C

CEntry.obj:
	$(CPP) $(SEQCPP_PROJ) /TP $(COMMON_SRC)\CEntry.C

.IGNORE:	 
CLEAN :
	rd /s /q BASICS
	rd /s /q DIRSSOURCES 
	rd /s /q libs
	del   /q *.obj
	del   /q vc60.*

VERYCLEAN : CLEAN
	rd /s /q ..\bin
	rd /s /q ..\lib
	rd /s /q ..\pgms
	rd /s /q ..\libsrc
	rd /s /q ..\include
	rd /s /q ..\src

