module NDMeshStreamer {
  extern module completion;

  include "DataItemTypes.h";

  template<class dtype> 
  message MeshStreamerMessage {
    int destinationPes[];
    dtype data[]; 
  };

  template<class dtype> group MeshStreamerGroupClient {
    entry void receiveCombinedData(MeshStreamerMessage<dtype> *msg);
  };

  template<class dtype> array [1D] MeshStreamerArrayClient {
    // entry void receiveCombinedData(MeshStreamerMessage<dtype> *msg);
    entry void receiveRedeliveredItem(dtype data);
  };

  template<class dtype> 
  group MeshStreamer {
    entry void receiveAlongRoute(MeshStreamerMessage<dtype> *msg);
    entry void flushDirect();
    entry void finish();
    entry void associateCallback(CkCallback startCb, CkCallback endCb, 
				 CProxy_CompletionDetector detector);
  };

  template<class dtype>
  group GroupMeshStreamer : MeshStreamer<dtype> {
    entry GroupMeshStreamer(
	  int totalBufferCapacity, int numDimensions, 
	  int dimensionSizes[numDimensions], 
	  const CProxy_MeshStreamerGroupClient<dtype> &clientProxy,
	  bool yieldFlag = 0, double progressPeriodInMs = -1.0);
  };


  template<class dtype>
    group ArrayMeshStreamer : MeshStreamer<ArrayDataItem<dtype> > {
    entry ArrayMeshStreamer(
	  int totalBufferCapacity, int numDimensions, 
	  int dimensionSizes[numDimensions],
	  const CProxy_MeshStreamerArrayClient<dtype> &clientProxy,
	  bool yieldFlag = 0, double progressPeriodInMs = -1.0);

    entry void receiveArrayData(
	       MeshStreamerMessage<ArrayDataItem<dtype> > *msg); 
  };

};

