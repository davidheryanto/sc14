<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="topic">
<meta name="DC.Title" content="Calling LAPACK, BLAS, and CBLAS Routines from C/C++ Language Environments">
<meta name="DC.subject" content="BLAS, calling routines from C, LAPACK, C interface to, use of, CBLAS interface, use of, C interface to LAPACK, use of, C, calling LAPACK, BLAS, CBLAS from, calling, Fortran-style routines from C">
<meta name="keywords" content="BLAS, calling routines from C, LAPACK, C interface to, use of, CBLAS interface, use of, C interface to LAPACK, use of, C, calling LAPACK, BLAS, CBLAS from, calling, Fortran-style routines from C">
<meta name="DC.Relation" scheme="URI" content="GUID-F089D943-2BDC-47B7-816C-1B15291C61FC.htm">
<meta name="DC.Relation" scheme="URI" content="http://www.intel.com/software/products/softwaredocs_feedback">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="GUID-ABCC618B-43C4-4DCD-ADA2-6F061B5116CD">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="intel_css_styles.css">
<title>Calling LAPACK, BLAS, and CBLAS Routines from C/C++ Language Environments</title>
<xml>
<MSHelp:Attr Name="DocSet" Value="Intel"></MSHelp:Attr>
<MSHelp:Attr Name="Locale" Value="kbEnglish"></MSHelp:Attr>
<MSHelp:Attr Name="TopicType" Value="kbReference"></MSHelp:Attr>
</xml>
</head>
<body id="GUID-ABCC618B-43C4-4DCD-ADA2-6F061B5116CD">
 <!-- ==============(Start:NavScript)================= -->
 <script src="NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(0);</script>
 <!-- ==============(End:NavScript)================= -->
<p id="header_text" style="margin-bottom : 20pt"><em>Intel&reg; Math Kernel Library 11.1 Update 3 User's Guide</em></p>


 
  <h1 class="topictitle1">Calling LAPACK, BLAS, and CBLAS Routines from C/C++ Language Environments</h1>
 
   
  <div id="GUID-E8BF1A4E-EB9A-421D-9063-7618E76CA60A"> 
	 <p id="GUID-F93CD83F-50E9-41A4-8C83-ED1D66F288E7">Not all Intel MKL function domains support both C and Fortran environments. To use Intel MKL Fortran-style functions in C/C++ environments, you should observe certain conventions, which are discussed for LAPACK and BLAS in the subsections below. 
	 </p>
 
	 <div class="Note"><h3 class="NoteTipHead">Caution</h3> 
		<p>Avoid calling BLAS&nbsp;95/LAPACK&nbsp;95 from C/C++. Such calls require skills in manipulating the descriptor of a deferred-shape array, which is the Fortran&nbsp;90 type. Moreover, BLAS95/LAPACK95 routines contain links to a Fortran RTL. 
		</p>
 
	 </div> 
	 <div class="section" id="GUID-882CE851-0A61-4EC3-B88A-BADA7C19E4EC"><h2 class="sectiontitle">LAPACK and BLAS</h2> 
		 
		<p id="GUID-934D0958-154A-4DE4-ABFC-870013A3F24B">Because LAPACK and BLAS routines are Fortran-style, when calling them from C-language programs, follow the Fortran-style calling conventions: 
		</p>
 
		<ul id="GUID-1C5488F6-5980-4935-84A7-7DAC9B1805FA"> 
		  <li id="GUID-E80E0913-EE2A-48F5-AB6E-E5C86A951B0A">Pass variables by 
			 <em id="GUID-460226F8-3885-4B32-B6C3-4DC28727D70F">address</em>, not by 
			 <em id="GUID-4346670C-DA57-475A-BEA1-0650D0410D17">value</em>. 
			 <br> Function calls in 
			 <a href="GUID-A0908E50-19D7-44C1-A068-44036B466BC7.htm#IX_COMPLEX_BLAS_LEVEL_1_1">Example "Calling a Complex BLAS Level 1 Function from C++"</a> and 
			 <a href="GUID-A0908E50-19D7-44C1-A068-44036B466BC7.htm#XREF_EXAMPLE_6_3_USING_CBLAS">Example "Using CBLAS Interface Instead of Calling BLAS Directly from C"</a> illustrate this. 
		  </li>
 
		  <li id="GUID-16AFDDB1-4CC9-4C49-9D19-E6944FF3C006">Store your data in Fortran style, that is, column-major rather than row-major order. 
		  </li>
 
		</ul>
 
		<p id="GUID-8BD972A8-EC10-4D59-A79F-84F14C8C46DD">With row-major order, adopted in C, the last array index changes most quickly and the first one changes most slowly when traversing the memory segment where the array is stored. With Fortran-style column-major order, the last index changes most slowly whereas the first index changes most quickly (as illustrated by the figure below for a two-dimensional array). 
		</p>
 
		<p id="GUID-7C33255E-8A36-466C-B9DD-7E5030B1126B"> 
		  <img src="GUID-3C2FFEF0-967E-43C3-992F-1ABEEE7C502E-low.jpg"> 
		</p>
 
		<p id="GUID-4A319742-9FDB-4EA6-9290-57C509889B1E">For example, if a two-dimensional matrix A of size 
		  <samp class="codeph" id="GUID-75952F7D-3F07-405B-95D0-53070637E08D">m</samp><samp class="codeph" id="GUID-32CD4CB1-A1FE-4A82-A5EE-B449C79CF280">x</samp><samp class="codeph" id="GUID-8C6BE763-3042-45A3-B6AA-AADDDD010763">n</samp> is stored densely in a one-dimensional array B, you can access a matrix element like this: 
		</p>
 
		<p id="GUID-B27987F2-5D5C-4300-AB16-80CD5FCA74E1"> 
		  <samp class="codeph" id="GUID-31E17ED6-46FD-47CB-B913-566CBDB3654D">A[i][j] = B[i*n+j]</samp> in C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( 
		  <samp class="codeph" id="GUID-BA8F3C5D-EFDD-4698-848E-2100BA9AD413">i=0, ... , m-1, j=0, ... , -1</samp>) 
		</p>
 
		<p id="GUID-44FAB98A-CD6A-4478-BDBB-B49CFFCCE846"> 
		  <samp class="codeph" id="GUID-527D9CC9-843C-4C27-ACF3-727C21DC426F">A(i,j) &nbsp;= B((j-1)*m+i)</samp> in Fortran &nbsp;( 
		  <samp class="codeph" id="GUID-976BD5D9-914B-490C-A153-38FCA1363C8D">i=1, ... , m, j=1, ... , n</samp>). 
		</p>
 
		<p id="GUID-8EB61515-217C-43BB-AD20-672A70A0AE96">When calling LAPACK or BLAS routines from C, be aware that because the Fortran language is case-insensitive, the routine names can be both upper-case or lower-case, with or without the trailing underscore. For example, the following names are equivalent: 
		</p>
 
		<ul id="GUID-C39CDA38-C20D-4325-AEAB-41E50BA3659F"> 
		  <li> 
			 <p id="GUID-2DE330AF-1F55-4F41-B732-8AABACC7C6C2">LAPACK: 
				<samp class="codeph" id="GUID-2F316993-4DBF-4692-B373-C31CCB7DBABE">dgetrf, DGETRF, dgetrf_</samp>, and 
				<samp class="codeph" id="GUID-6D5F6CC3-D2B4-4E11-A1C7-CE9B1E72777F">DGETRF_</samp> 
			 </p>
 
		  </li>
 
		  <li> 
			 <p id="GUID-49289659-B475-4C4B-8110-50E816CE0D47">BLAS: 
				<samp class="codeph" id="GUID-6C73ED20-9FEA-48DE-B16F-E102FCF871D2">dgemm, DGEMM, dgemm_</samp>, and 
				<samp class="codeph" id="GUID-E3ED3103-F338-4AF5-B24C-7B9A8AA32286">DGEMM_</samp> 
			 </p>
 
		  </li>
 
		</ul>
 
		<p id="GUID-18582589-460F-4FEC-8A62-B1FBC4410AA0">See 
		  <a href="GUID-A0908E50-19D7-44C1-A068-44036B466BC7.htm#IX_COMPLEX_BLAS_LEVEL_1_1">Example "Calling a Complex BLAS Level 1 Function from C++"</a> on how to call BLAS routines from C. 
		</p>
 
		<p id="GUID-07A45C2D-14ED-4495-A788-7F4C1E1AE4DF">See also the Intel&reg; MKL Reference Manual for a description of the C interface to LAPACK functions. 
		</p>
 
	 </div>
 
	 <div class="section" id="GUID-BC8390D4-3C5F-4827-85E5-B1D4F78FF4DC"><h2 class="sectiontitle">CBLAS</h2> 
		 
		<p id="GUID-035CD947-C048-4BCB-8900-C513BD36C846"> 
		  <span id="GUID-9896DD87-A5FF-4255-8ABA-0481D3356895">Instead of calling BLAS routines from a C-language program, you can use the CBLAS interface.</span> 
		</p>
 
		<p id="GUID-FDFC1A7B-6833-495B-806A-BDA1942F640F">CBLAS is a C-style interface to the BLAS routines. You can call CBLAS routines using regular C-style calls. Use the 
		  <span class="filepath" id="GUID-0F23DAD9-A0F3-4389-A30E-C02241ABC703">mkl.h</span> header file with the CBLAS interface. The header file specifies enumerated values and prototypes of all the functions. It also determines whether the program is being compiled with a C++ compiler, and if it is, the included file will be correct for use with C++ compilation. 
		  <a href="GUID-A0908E50-19D7-44C1-A068-44036B466BC7.htm#XREF_EXAMPLE_6_3_USING_CBLAS">Example "Using CBLAS Interface Instead of Calling BLAS Directly from C"</a> illustrates the use of the CBLAS interface. 
		</p>
 
	 </div>
 
	 <div class="section" id="GUID-B60A4C46-ABC6-45DC-B217-7CC8BDBA77AA"><h2 class="sectiontitle">C Interface to LAPACK</h2> 
		 
		<p id="GUID-28B01AA5-179B-4203-AB24-3A892FB15095"> 
		  <span id="GUID-7DA97BE3-6E51-4204-9AAF-58B40FD0E606">Instead of calling LAPACK routines from a C-language program, you can use the C interface to LAPACK provided by Intel MKL.</span> 
		</p>
 
		<p id="GUID-5A428C47-655E-4F3B-A57C-5DAB867B600F"> The C interface to LAPACK is a C-style interface to the LAPACK routines. This interface supports matrices in row-major and column-major order, which you can define in the first function argument 
		  <span class="parmname">matrix_order</span>. Use the 
		  <span class="filepath">mkl.h</span> header file with the C interface to LAPACK. 
		  <span class="filepath">mkl.h</span> includes the 
		  <span class="filepath" id="GUID-148DA6CF-D194-4946-A397-F6FBFA7CC2D2">mkl_lapacke.h</span> header file, which specifies constants and prototypes of all the functions. It also determines whether the program is being compiled with a C++ compiler, and if it is, the included file will be correct for use with C++ compilation. You can find examples of the C interface to LAPACK in the 
		  <span class="filepath" id="GUID-0CE477A5-0F70-442A-9A9B-6536231183C8">examples</span><span class="filepath" id="GUID-0F1F87CE-E445-4023-8855-15A9C4401267">/</span><span class="filepath" id="GUID-88CFC34C-B44F-4308-A480-C1D866E185B0">lapacke</span> subdirectory in the Intel MKL installation directory. 
		</p>
 
	 </div>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="GUID-F089D943-2BDC-47B7-816C-1B15291C61FC.htm">Mixed-language Programming with the Intel Math Kernel Library</a></div>
</div>
<div><br clear="all">
<div class="docfeedback">
<div><a href="http://www.intel.com/software/products/softwaredocs_feedback" target="_blank">Submit feedback on this help topic 
		  </a></div></div></div> 

</body>
</html>
