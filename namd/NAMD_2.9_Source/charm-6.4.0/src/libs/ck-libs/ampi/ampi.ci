module ampi {
  message AmpiMsg {
    char data[];
  };

  initnode void ampiNodeInit(void);
  initproc void ampiProcInit(void);

  array[1D] ampiParent {
    entry [notrace] ampiParent(int universeNo,CProxy_TCharm threads_);
    entry void ResumeThread();
    entry void Checkpoint(int len, char dname[len]);
    entry void ExchangeProxy(CProxy_ampi);
  };
  array[1D] ampi {
    entry ampi();    
    entry [notrace] ampi(CkArrayID parent_,ampiCommStruct s);
    entry [notrace] ampi(CkArrayID parent_,ampiCommStruct s,ComlibInstanceHandle ciStreaming_,
		ComlibInstanceHandle ciBcast_,ComlibInstanceHandle ciAllgather_,ComlibInstanceHandle ciAlltoall_);
    entry void allInitDone(CkReductionMsg *m);
    entry void setInitDoneFlag();
    entry void unblock(void);
    entry void ssend_ack(int);
    entry void generic(AmpiMsg *);
    entry void reduceResult(CkReductionMsg *m);
    entry void splitPhase1(CkReductionMsg *msg);
    entry void commCreatePhase1(CkReductionMsg *msg);
    entry void cartCreatePhase1(CkReductionMsg *msg);
    entry void graphCreatePhase1(CkReductionMsg *msg);
    entry void intercommCreatePhase1(CkReductionMsg *msg);
    entry void intercommMergePhase1(CkReductionMsg *msg);
    entry void setRemoteProxy(CProxy_ampi rproxy);
    entry void winRemotePut(int orgtotalsize, char orgaddr[orgtotalsize], int orgcnt, MPI_Datatype orgtype, 
			   MPI_Aint targdisp, int targcnt, MPI_Datatype targtype, int winIndex,
			   CkFutureID ftHandle, int pe_src);
    entry void winRemoteGet(int orgcnt, MPI_Datatype orgtype,
			   MPI_Aint targdisp, int targcnt, MPI_Datatype targtype, int winIndex,
                           CkFutureID ftHandle, int pe_src);
    entry void winRemoteAccumulate(int orgtotalsize, char orgaddr[orgtotalsize], int orgcnt, MPI_Datatype orgtype, 
				  MPI_Aint targdisp, int targcnt, MPI_Datatype targtype, 
				  MPI_Op op, int winIndex, CkFutureID ftHandle, int pe_src);
    entry void winRemoteLock(int lock_type, int winIndex, CkFutureID ftHandle, int pe_src, int requestRank);
    entry void winRemoteUnlock(int winIndex, CkFutureID ftHandle, int pe_src, int requestRank);
    entry [iget] AmpiMsg *winRemoteIGet(int orgdisp, int orgcnt, MPI_Datatype orgtype,
                           MPI_Aint targdisp, int targcnt, MPI_Datatype targtype, int winIndex);
    entry [iget] AmpiMsg *Alltoall_RemoteIGet(int disp, int cnt, MPI_Datatype type, int tag);
  };

  group [migratable] ampiWorlds {
    entry ampiWorlds(ampiCommStruct nextWorld);
    entry void add(ampiCommStruct nextWorld);
  };
};
