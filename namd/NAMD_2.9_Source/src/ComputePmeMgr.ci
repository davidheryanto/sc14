/**
***  Copyright (c) 1995, 1996, 1997, 1998, 1999, 2000 by
***  The Board of Trustees of the University of Illinois.
***  All rights reserved.
**/

module ComputePmeMgr {

  message PmeGridMsg {
    float qgrid[];
    int zlist[];
    char fgrid[];
    PmeReduction evir[];
  };
  message PmeTransMsg {
    float qgrid[];
  };
  message PmeSharedTransMsg;
  message PmeUntransMsg{
    float qgrid[];
    PmeReduction evir[];
  };
  message PmeSharedUntransMsg;

  group PmePencilMap : CkArrayMap {
    entry PmePencilMap(int i_a, int i_b, int n_b, int n, int d[n]);
  };

  message PmePencilInitMsg;

  message PmeAckMsg;

  array [3D] PmeZPencil {
    entry PmeZPencil();
    entry void recvGrid(PmeGridMsg *);
    entry void recvUntrans(PmeUntransMsg *);
    entry void recvAck(PmeAckMsg *);
    entry void dummyRecvGrid(int pe, int done = 0);
    entry void init(PmePencilInitMsg *initmsg) {
      atomic {
	// CkPrintf("z pencil init %d %d %d on %d\n",
	// thisIndex.x, thisIndex.y, thisIndex.z, CkMyPe());
	base_init(initmsg); delete initmsg;
	fft_init();
	// now count how many nodes send us data
	imsg = 0; grid_msgs.resize(0);
      }
      while ( ! imsg ) {
        when dummyRecvGrid(int pe, int done) atomic {
          if ( done ) imsg = 1;
          else {
            grid_msgs.add(0);  // increment size
            // CkPrintf("pencil %d %d on node %d receive from node %d\n",
	    // thisIndex.x, thisIndex.y, CkMyPe(), pe);
          }
        }
      }
      // atomic { CkPrintf("pencil %d %d receiving from %d nodes\n",
      //       thisIndex.x, thisIndex.y, grid_msgs.size()); }

      // ready to go
      while ( 1 ) {
        atomic { hasData = 0; }
        for ( imsg=0; imsg < grid_msgs.size(); ++imsg ) {
          when recvGrid(PmeGridMsg *msg) atomic "recv_grid" {
            if ( msg->hasData ) hasData = 1;
            recv_grid(msg); grid_msgs[imsg] = msg;
          }
        }
	if ( hasData ) {
	  atomic "forward_fft" { forward_fft(); }
	}
        atomic "send_trans" { send_trans(); }
	if ( hasData ) {
	  for ( imsg=0; imsg < initdata.zBlocks; ++imsg ) {
	    when recvUntrans(PmeUntransMsg *msg) atomic "recv_untrans" {
	      recv_untrans(msg); delete msg;
	    }
	  }
	  atomic "backward_fft" { backward_fft(); }
	}
	atomic "send_ungrid" {
	  int send_evir = 1;
	  for ( imsg=0; imsg < grid_msgs.size(); ++imsg ) {
	    PmeGridMsg *msg = grid_msgs[imsg];
	    if ( msg->hasData ) {
	      if ( send_evir ) {
		msg->evir[0] = evir;
		send_evir = 0;
	      } else {
		msg->evir[0] = 0.;
	      }
	    }
	    send_ungrid(msg);
	  }
	}
	if ( ! hasData ) {
	  for ( imsg=0; imsg < initdata.zBlocks; ++imsg ) {
	    when recvAck(PmeAckMsg *msg) atomic { delete msg; }
	  }
	}
      }
    };
  };

  array [3D] PmeYPencil {
    entry PmeYPencil();
    entry void recvTrans(PmeTransMsg *);
    entry void recvUntrans(PmeUntransMsg *);
    entry void recvAck(PmeAckMsg *msg);
    entry void init(PmePencilInitMsg *initmsg) {
      atomic {
      //CkPrintf("y pencil init %d %d %d on %d\n",
	//	thisIndex.x, thisIndex.y, thisIndex.z, CkMyPe());
      base_init(initmsg); delete initmsg;
      fft_init();
      }
      while ( 1 ) {
        atomic { hasData = 0; }
        for ( imsg=0; imsg < initdata.yBlocks; ++imsg ) {
          when recvTrans(PmeTransMsg *msg) atomic "recv_trans" {
            if ( msg->hasData ) hasData = 1;
            needs_reply[msg->sourceNode] = msg->hasData;
            recv_trans(msg); delete msg;
          }
        }
       if ( hasData ) {
        atomic "forward_fft" { forward_fft(); }
       }
        atomic "send_trans" { send_trans(); }
       if ( hasData ) {
        for ( imsg=0; imsg < initdata.yBlocks; ++imsg ) {
          when recvUntrans(PmeUntransMsg *msg) atomic "recv_untrans" {
            recv_untrans(msg); delete msg;
          }
        }
        atomic "backward_fft" { backward_fft(); }
        atomic "send_untrans0" { send_untrans(); }
       } else {
        atomic "send_untrans1" { send_untrans(); }
        for ( imsg=0; imsg < initdata.yBlocks; ++imsg ) {
	  when recvAck(PmeAckMsg *msg) atomic { delete msg; }
        }
       }
      }
    };
  };

  array [3D] PmeXPencil {
    entry PmeXPencil();
    entry void recvTrans(PmeTransMsg *);
    entry void init(PmePencilInitMsg *initmsg) {
      atomic {
      //CkPrintf("x pencil init %d %d %d on %d\n",
	//	thisIndex.x, thisIndex.y, thisIndex.z, CkMyPe());
      base_init(initmsg); delete initmsg;
      fft_init();
      }
      while ( 1 ) {
        atomic { hasData = 0; }
        for ( imsg=0; imsg < initdata.xBlocks; ++imsg ) {
          when recvTrans(PmeTransMsg *msg) atomic "recv_trans" {
            if ( msg->hasData ) hasData = 1;
            needs_reply[msg->sourceNode] = msg->hasData;
            recv_trans(msg); delete msg;
          }
        }
       if ( hasData ) {
        atomic "forward_fft" { forward_fft(); }
        atomic "pme_kspace" { pme_kspace(); }
        atomic "backward_fft" { backward_fft(); }
       }
       atomic "send_untrans" { send_untrans(); }
      }
    };
  };

  nodegroup NodePmeMgr {
    entry NodePmeMgr(void);
    entry [expedited] void recvTrans(PmeTransMsg *);
    entry [expedited] void recvUntrans(PmeUntransMsg *);
  };
  group ComputePmeMgr {

    entry ComputePmeMgr(void);

    entry void initialize(CkQdMsg *);
    entry void initialize_pencils(CkQdMsg *);
    entry void activate_pencils(CkQdMsg *);
    entry void sendGrid(void);
    entry void recvGrid(PmeGridMsg *);
    entry void gridCalc1(void);
    entry void sendTransBarrier(void);
    entry void sendTrans(void);
    entry void recvSharedTrans(PmeSharedTransMsg *);
    entry void recvTrans(PmeTransMsg *);
    entry void gridCalc2(void);
    entry void gridCalc2R(void);
    entry void sendUntrans(void);
    entry void recvSharedUntrans(PmeSharedUntransMsg *);
    entry void recvUntrans(PmeUntransMsg *);
    entry void gridCalc3(void);
    entry void sendUngrid(void);
    entry void recvUngrid(PmeGridMsg *);
    entry void recvAck(PmeAckMsg *);
    entry void ungridCalc(void);

    entry void recvArrays(
		CProxy_PmeXPencil, CProxy_PmeYPencil, CProxy_PmeZPencil);
  };

}

